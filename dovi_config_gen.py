#!/usr/bin/python

import numpy as np
# np.set_printoptions(precision=6, suppress=True)


def xy_to_xyz(x, y):
    X = x / y
    Y = 1.0
    Z = (1.0 - x - y) / y

    return np.array([X, Y, Z])


def get_lms_mat():
    c = 0.00

    CROSS_TALK = np.array([[1 - 2 * c, c, c], [c, 1 - 2 * c, c], [c, c, 1 - 2 * c]])
    """
    CROSS_TALK_INVERSE = np.linalg.inv(CROSS_TALK)

    # IPT_CROSS_TALK_INVERSE = np.array([
        [17081, -349, -349],
        [-349, 17081, -349],
        [-349, -349, 17081]
    ]) / 16384.0

    IPT_CROSS_TALK = np.linalg.inv(IPT_CROSS_TALK_INVERSE)

    # Replace with actual measured primaries
    REC2020_TO_XYZ = np.array([
        [0.6370, 0.1446, 0.1689],
        [0.2627, 0.6780, 0.0593],
        [0, 0.0281, 1.0610]
    ])
    """

    HPE_D65 = np.array([[0.40024, 0.70760, -0.08081], [-0.22630, 1.16532, 0.04570], [0, 0, 0.91822]])

    return np.dot(CROSS_TALK, HPE_D65)


def print_dovi_config():
    """
    Rename file to DolbyVision_UserDisplayConfiguration.TXT
    """
    flat_lms2rgb = np.around(LMS_TO_RGB.flatten(), decimals=15)
    lms2rgb_str = " ".join([f"{x:01.14f}" for x in flat_lms2rgb])

    print("# Dolby Vision User Display Configuration File")
    print("# Generated by 5.12.3 on Sun 13 May 2022")
    print("# Display: Unspecified")
    print("# DM Version: ")
    print("PictureMode = 2")
    print("Tmax = 700.0")
    print("Tmin = 0.0001")
    print("Tgamma = 2.2")
    print(f"ColorPrimaries = {Rx:01.4f} {Ry:01.4f} {Gx:01.4f} {Gy:01.4f} {Bx:01.4f} {By:01.4f} {Wx:01.4f} {Wy:01.4f}")
    print(f"TLMS2RGBmat = {lms2rgb_str}")


# D65
Wx, Wy = 0.3127, 0.3290

# Test: 0.6703 0.3297 0.2606 0.6732 0.1442 0.0512 0.3127 0.3290
# Expected: 4.21700207473692 -3.34029921699518 0.123297142258255 -0.989889535601035 2.13542847681555 -0.14553894121451 0.0656997377333644 -0.141730047474527 1.07603030974116

# Replace with RGB DCI-P3 measurements, in CIE 1976 xy
# HCFR or Calman results in the same values
Rx, Ry = 0.680, 0.320
Gx, Gy = 0.265, 0.690
Bx, By = 0.150, 0.060

D65_WP = xy_to_xyz(Wx, Wy)
R_XYZ = xy_to_xyz(Rx, Ry)
G_XYZ = xy_to_xyz(Gx, Gy)
B_XYZ = xy_to_xyz(Bx, By)

RGB_XYZ = np.array([R_XYZ, G_XYZ, B_XYZ]).transpose()
RGB_XYZ_INVERSE = np.linalg.inv(RGB_XYZ)
S = RGB_XYZ_INVERSE.dot(D65_WP)

CUSTOM_PRIM_TO_XYZ = S * RGB_XYZ

XYZ_TO_LMS = get_lms_mat()
RGB_TO_LMS = np.dot(XYZ_TO_LMS, CUSTOM_PRIM_TO_XYZ)

LMS_TO_RGB = np.linalg.inv(RGB_TO_LMS)

print_dovi_config()
